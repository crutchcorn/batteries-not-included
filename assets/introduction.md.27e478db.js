import{_ as e,o as t,c as a,N as o}from"./chunks/framework.c6f03c5f.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{"head":[["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:title","content":"Batteries Not Included"}],["meta",{"property":"og:description","content":"Simple-to-use React Hooks for RxJS interop."}]]},"headers":[],"relativePath":"introduction.md","lastUpdated":1694037041000}'),i={name:"introduction.md"},r=o('<p>We&#39;ve all been there, using a library we&#39;ve found that works well for just about every task you throw at it; until it doesn&#39;t. There&#39;s some configuration that the developers have placed in the codebase that prevents you from using it.</p><p>Maybe there&#39;s some UI element you end up re-writing the logic for various times and wish there was a generic abstraction you could base them all off of?</p><p>That&#39;s the goal of this library: Provide developers a set of &quot;batteries-not-included&quot; generic utilities to take and base your code off of. What does &quot;no-batteries-included&quot; mean? We want to make no assumptions about the places you&#39;ll be using the code. By making these utilities small-scale and abstracted, we have the ability to make our code modular and highly customizable.</p><p>Still having a hard time understanding what I mean? That&#39;s perfectly normal. Take a look around our packages for various items:</p><ul><li><a href="/batteries-not-included/react.html">React Utilities</a></li><li><a href="/batteries-not-included/utils.html">JavaScript Utilities</a></li><li>More coming soon</li></ul><p>While this package is in a pre-release stage, we will be following the semver release schedule. If there is a breaking change in the pre-release state, we will bump the <code>minor</code> number.</p>',6),s=[r];function n(l,c,d,u,h,p){return t(),a("div",null,s)}const _=e(i,[["render",n]]);export{f as __pageData,_ as default};
